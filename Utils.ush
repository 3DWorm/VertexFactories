#include "fnl.ush"
#include "Colors.ush"

struct KeyPoint
{
    float value;
    float height;
};

float GetContinentalness(int seed, float3 pos)
{
    fnl_state selectState = fnlCreateState(seed + 422);
    selectState.frequency = 0.001f;
    selectState.octaves = 1;
    selectState.fractal_type = 0;
    
    return fnlGetNoise2D(selectState, pos.x, pos.y);
}

float GetChaos(int seed, float3 pos)
{
    fnl_state selectState = fnlCreateState(seed + 1238);
    selectState.frequency = 0.001f;
    selectState.octaves = 1;
    selectState.fractal_type = 0;
    
    return fnlGetNoise2D(selectState, pos.x, pos.y);
}

float GetTemperature(int seed, float3 pos)
{
    fnl_state selectState = fnlCreateState(seed + 1284);
    selectState.frequency = 0.001f;
    selectState.octaves = 1;
    selectState.fractal_type = 0;
    
    return fnlGetNoise2D(selectState, pos.x, pos.y);
}

float GetDirtStone(int seed, float3 pos)
{
    fnl_state selectState = fnlCreateState(seed + 1288);
    selectState.frequency = 0.02f;
    selectState.octaves = 1;
    selectState.fractal_type = 0;
    
    return fnlGetNoise3D(selectState, pos.x, pos.y, pos.z);
}

int GetUnderground(float3 pos)
{
    return pos.z < -48 ? 1 : 0;
}

float GetCheese(int seed, float3 pos)
{
    fnl_state cheeseState = fnlCreateState(seed + 2838428);
    cheeseState.frequency = 0.0025f;
    cheeseState.octaves = 3;
    cheeseState.fractal_type = 1;
    return fnlGetNoise3D(cheeseState, pos.x, pos.y, pos.z) - 0.25f;
}

float GetVerticalAngle(float3 normal)
{
    float3 vertical = float3(0, 0, 1);
    float dotProduct = dot(normal, vertical);
    dotProduct = clamp(dotProduct, -1.0, 1.0);
    float angleRad = acos(dotProduct);
    float angleDeg = degrees(angleRad);
    return angleDeg;
}

// Linear interpolation function with fade
float lerp(float a, float b, float t, float fade) {
    if (t < fade)
    {
        return a + t * (b - a) / fade; // Apply fade
    }
    return b;
}

// Function to get terrain height based on continentalness
float GetTerrainHeight3(float value, const KeyPoint Points[3], float fade)
{
    for (int i = 0; i < 2; ++i) {
        if (value >= Points[i].value && value <= Points[i + 1].value) {
            float t = (value - Points[i].value) / (Points[i + 1].value - Points[i].value);
            return lerp(Points[i].height, Points[i + 1].height, t, fade);
        }
    }
    return value < Points[0].value ? Points[0].height : Points[2].height;
}
float GetTerrainHeight2(float value, const KeyPoint Points[2], float fade)
{
    for (int i = 0; i < 1; ++i) {
        if (value >= Points[i].value && value <= Points[i + 1].value) {
            float t = (value - Points[i].value) / (Points[i + 1].value - Points[i].value);
            return lerp(Points[i].height, Points[i + 1].height, t, fade);
        }
    }
    return value < Points[0].value ? Points[0].height : Points[1].height;
}

float GetSquashingFactor(float height, float minHeight, float maxHeight, float minSquash, float maxSquash)
{
    if(height <= minHeight)
        return minSquash;
    if(height >= maxHeight)
        return maxSquash;

    float t = (height-minHeight)/(maxHeight-minHeight);
    return lerp(minSquash, maxSquash, t);
}

float GetHeight(float3 pos, int seed)
{
    float height = 0;
	
    fnl_state lowlandsState = fnlCreateState(seed + 21411);
    lowlandsState.frequency = 0.005f;
    lowlandsState.octaves = 4;
    lowlandsState.fractal_type = 1;
    float lowlandsAmplitude = 8.0f;
    fnl_state highlandsState = fnlCreateState(seed + 223424);
    highlandsState.frequency = 0.01f;
    highlandsState.octaves = 5;
    highlandsState.fractal_type = 1;
    float highlandsAmplitude = 11.0f;
    fnl_state mountainsState = fnlCreateState(seed + 325235);
    mountainsState.frequency = 0.005f;
    mountainsState.octaves = 4;
    mountainsState.fractal_type = 1;
    float mountainsAmplitude = 45.0f;

    float lowlands = fnlGetNoise2D(lowlandsState, pos.x, pos.y) * lowlandsAmplitude - 20.0f;
    float highlands = fnlGetNoise2D(highlandsState, pos.x, pos.y) * highlandsAmplitude;
    float mountains = fnlGetNoise2D(mountainsState, pos.x, pos.y) * mountainsAmplitude;
    const KeyPoint Points[3] =
    {
        {-0.6f, lowlands},
        {0.4f, highlands},
        {1.0f, mountains}
    };
    float baseHeight = GetTerrainHeight3(GetContinentalness(seed, pos), Points, 0.1f);
    height += baseHeight;

    return height;
}

float GetDensity(float3 pos, int seed, int3 WorldSize)
{
    float density = pos.z;
    float height = GetHeight(pos, seed);
    density -= height;

    fnl_state chaosState = fnlCreateState(seed + 325235);
    chaosState.frequency = 0.01f;
    chaosState.octaves = 3;
    chaosState.fractal_type = 1;
    float chaosAmplitude = 50.0f;
    float chaos = fnlGetNoise3D(chaosState, pos.x, pos.y, pos.z) * chaosAmplitude;
    const KeyPoint ChaosPoints[2] =
    {
        {-0.6f, chaos},
        {1.0f, 0.0f}
    };
    density -= GetTerrainHeight2(GetChaos(seed, pos), ChaosPoints, 0.1f);

    fnl_state cavesState = fnlCreateState(seed + 552356);
    cavesState.frequency = 0.005f;
    cavesState.octaves = 4;
    cavesState.fractal_type = 1;

    fnl_state cavesState2 = cavesState;
    cavesState2.seed = seed + 12414;

    //ridges will be near one
    float3 cavePos = float3(pos.x, pos.y, pos.z * 1.35f);

    float cave1 = fnlGetNoise3D(cavesState, cavePos.x, cavePos.y, cavePos.z);
    float cave2 = fnlGetNoise3D(cavesState2, cavePos.x, cavePos.y, cavePos.z);
	
    float spaghettiCaves1 = 1 - abs(cave1);
    float spaghettiCaves2 = 1 - abs(cave2);

    float caves = spaghettiCaves1 * spaghettiCaves2;
    //ridges are near 1, since 1 is air and -1 is stone this will yield ridged caves.
    caves = caves * 2 - 1.4;
    caves -= GetSquashingFactor(pos.z, -400.0f, 0, 0.1f, 0.32f);

    float cheese = GetCheese(seed, pos);
    cheese -= GetSquashingFactor(pos.z, -400.0f, 0, 0.1f, 0.55f);
	
    caves = max(caves, cheese);
    density = max(caves, density);

    density += max(-(WorldSize.z+pos.z)/128, 0);

    float underworld = pos.z + WorldSize.z + 128;
    underworld += height;
    density = min(underworld, density);

    return density;
}

// Function to calculate the gradient at a given position
float3 CalculateGradient(float3 position, int seed, int3 WorldSize)
{
    float epsilon = 0.01f; // Small offset for numerical gradient calculation
    
    float3 dx = float3(epsilon, 0, 0);
    float3 dy = float3(0, epsilon, 0);
    float3 dz = float3(0, 0, epsilon);
    
    float gradX = GetDensity(position + dx, seed, WorldSize) - GetDensity(position - dx, seed, WorldSize);
    float gradY = GetDensity(position + dy, seed, WorldSize) - GetDensity(position - dy, seed, WorldSize);
    float gradZ = GetDensity(position + dz, seed, WorldSize) - GetDensity(position - dz, seed, WorldSize);
    
    return float3(gradX, gradY, gradZ) / (2*epsilon);
}

// Function to find the closest surface point
float3 FindSurfacePoint(float3 initialPoint, int seed, int3 WorldSize, int iterations)
{
    float3 currentPoint = initialPoint;
    
    for(int i = 0; i < iterations; i++)
    {
        float density = GetDensity(currentPoint, seed, WorldSize);
        float3 gradient = CalculateGradient(currentPoint, seed, WorldSize);

        float gradientMagnitudeSquared = dot(gradient, gradient);
        
        // Avoid division by zero
        if (gradientMagnitudeSquared > 0.00001f)
        {
            // Update the point
            currentPoint = currentPoint - density * gradient / gradientMagnitudeSquared;
        }
        else
        {
            // If the gradient is too small, break out of the loop to prevent instability
            break;
        }
    }
    return currentPoint;
}

float HashPosition(int3 pos, uint seed)
{
    int3 p = pos;
    
    // Use a stable hashing algorithm with int3
    p.x += int(seed);
    p.y += int(seed * 33);
    p.z += int(seed * 333);

    // Perform some mixing of bits to generate a good hash
    p = (p ^ (p >> 17)) * 0x85ebca6b;
    p = (p ^ (p >> 13)) * 0xc2b2ae35;
    p = (p ^ (p >> 16));

    // Combine the components to generate a single float hash value
    int hash = p.x ^ p.y ^ p.z;

    // Normalize the hash to a [0, 1] range using the maximum int value
    return abs(float(hash) / 2147483647.0);
}

/* Get Biome Colors */

int GetBiome2(float value, const float Points[2])
{
	for (int i = 0; i < 1; ++i) {
		if (value >= Points[i] && value <= Points[i + 1]) {
			return i+1;
		}
	}
	return value < Points[0] ? 0 : 1;
}
int GetBiome3(float value, const float Points[3])
{
	for (int i = 0; i < 2; ++i) {
		if (value >= Points[i] && value <= Points[i + 1]) {
			return i+1;
		}
	}
	return value < Points[0] ? 0 : 2;
}

float4 GetVertexColor(float3 absPos)
{
	const float ContinentalnessPoints[3] =
	{
		-0.6f, //lowlands
		0.4f, //highlands,
		1.0f, //mountains
	};
	const float ChaosPoints[2] =
	{
		-0.6f,
		1.0f,
	};
	const float TemperaturePoints[3] =
	{
		-0.34f, 0.34f, 1.0f
	};
	const float UndergroundBiomePoints[2] =
	{
		0.0f,
		1.0f,
	};

	int continentalness = GetBiome3(GetContinentalness(seed, absPos), ContinentalnessPoints);
	int chaos = GetBiome2(GetChaos(seed, absPos), ChaosPoints);
	int temperature = GetBiome3(GetTemperature(seed, absPos), TemperaturePoints);
	int underground = GetUnderground(absPos);
	int undergroundbiome = GetBiome2(GetCheese(seed, absPos), UndergroundBiomePoints);
		
	float underworld = absPos.z + WorldSize.z; //WorldSize is defined in both marchingcs.usf and noisecs.usf

	const float oceanSize = 50.0f;
	int ocean = abs(absPos.x) > WorldSize.x - oceanSize || abs(absPos.y) > WorldSize.y - oceanSize;

	float dirtstoneNoise = GetDirtStone(seed, absPos);
	int dirtstone = dirtstoneNoise < 0.0f ? 1 : 0;
	/*
	 *
	continentalness
		 0(lowlands)	cold: overworld		cold: corruption
						mid: drygrass		mid: jungle
						hot: desert			hot: overworld
		 
		 1(highlands)	cold: snow			cold: overworld
						mid: jungle		    mid: corruption
						hot: desert			hot: jungle
						
		 
		 2(mountains)	cold: snow			cold:snow
						mid: corruption		mid: corruption
						hot: desert			hot: jungle
	chaos				0					1
	 */
	 
	 /*
	  undergroundbiome

					marble	granite	mushroom
	  temperature	cold	mid		hot
	 */
	float4 overworld = underground ? (dirtstone ? brown : grey) : black;
	float4 dryoverworld = underground ? (dirtstone ? brown : grey) : red;
	float4 evil = purple;

	if(ocean)
		return underground ? (dirtstone ? brown : grey) : orange;
	if(underworld < 0)
		return darkred;
	
	if(absPos.z < -96)
	{
		switch(undergroundbiome)
	    {
		    case 1:
		        return darkblue;
	    }
	}
	switch (continentalness)
	{
		case 0:  // Lowlands
			switch (temperature)
			{
				case 0: return chaos ? evil : overworld;
				case 1: return chaos ? green : dryoverworld;
				case 2: return chaos ? overworld : yellow;
			}
		case 1:  // Highlands
			switch (temperature)
			{
				case 0: return chaos ? overworld : blue;
				case 1: return chaos ? evil : green;
				case 2: return chaos ? green : yellow;
			}
		case 2:  // Mountains
			switch (temperature)
			{
				case 0: return chaos ? blue : blue;
				case 1: return chaos ? evil : evil;
				case 2: return chaos ? green : yellow;
			}
	}
	return black;
}
